1、html是从上往下加载，若出现未声明的问题，则可能是.js文件最后加载导致。
2、属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。Remark提示:在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：name='John "ShotGun" Nelson'
3、html、JavaScript 大小写敏感，需注意！
4、catch	语句块，在 try 语句块执行出错时执行 catch 语句块。
5、如果重新声明 JavaScript 变量，该变量的值不会丢失：
6、JavaScript 对象是变量的容器。
7、引号嵌套的时候容易出错，双引号嵌套的下一层一定为单引号，不然容易引起错误。
8、如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
9、在JS中进行运算的时候，通过节点取到的值为string类型（document.getElementById("demo").value），需要进行转换才可以进行数值计算。转换方式有两种：（1）Number（x），（2）x-0。
10、字符串和数字相加结果是字符串。对象通过valueOf方法，把自己转换成数字，通过toString方法，把自己转换成字符串。具有valueOf方法的对象，应该定义一个相应的toString方法，用来返回相等的数字的字符串形式。
11、检测一些未定义的变量时，应该使用typeOf或者与undefined作比较，而不应该直接用真值运算。
12、在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。
13、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。全局变量，或者函数，可以覆盖 window 对象的变量或者函数。局部变量，包括 window 对象可以覆盖全局变量和函数。
14、document.getElementById("demo").innerHTML = x + "<br>" + y;  document.write("<p>" + txt.length + "</p>"); 其中标签<p> </p> <br> 需要加引号。
15、for/in - 循环遍历对象的属性。
16、txt=txt + person[x]。或者document.getElementById("demo").innerHTML += txt;
17、通过标签引用，break 语句可用于跳出任何 JavaScript 代码块。
18、你可以设置为 null 来清空对象，也可以设置为 undefined 来清空对象。
19、Operator + 可用于将变量转换为数字。当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法。
20、JavaScript 中，变量可以在使用后声明，也就是变量可以先使用再声明。变量提升：函数声明和变量声明总是会被解释器悄悄地被"提升"到方法体的最顶部。
21、JavaScript 只有声明的变量会提升，初始化的不会。
22、浮点数在进行加减法运算的时候会出现精度损失的问题，例如：0.1+0.2=0.300000000004。解决办法为整数的乘除法，0.3 = (0.1 * 10 + 0.2 * 10) / 10; 
23、JavaScript 不支持使用名字来索引数组，只允许使用数字索引。
24、在 JavaScript 中, 对象 使用 名字作为索引。
25、如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误。
26、在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。对象只有被定义才有可能为 null，否则为 undefined。if (typeof myObj !== "undefined" && myObj !== null)
27、JSON 是用于存储和传输数据的格式。JSON 通常用于服务端向网页传递数据 。
28、代码规范：（1）变量名推荐使用驼峰法来命名；（2）通常运算符 ( = + - * / ) 前后需要添加空格；（3）通常使用 4 个空格符号来缩进代码块；（4）全局变量和常量为大写
29、参数内有Arguments对象，该对象可以接收函数调用时传进来的参数，使用方便，例如找到一列数中的最大值或者对他们求和。
30、一般而言，在Javascript中，this指向函数执行时的当前对象。
31、对象内部定义函数：fullName: function () {return this.firstName + " " + this.lastName;    }
32、Call（）和Apply（），两个方法都使用了对象本身作为第一个参数。两者的区别在于第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。
33、JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。
34、闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。
DOM
35、getElementsByTagName是document的方法，只能通过document调用。
36、绝对不要在文档加载完成之后使用 document.write()。这会覆盖该文档。
37、onchange 事件常结合对输入字段的验证来使用。
38、addEventListener()方法用于向指定元素添加事件句柄。addEventListener()方法添加的事件句柄不会覆盖已存在的事件句柄。你可以向同个元素添加多个同类型的事件句柄，如：两个 "click" 事件。
39、事件传递定义了元素事件触发的顺序。 如果你将 <p> 元素插入到 <div> 元素中，用户点击 <p> 元素, 哪个元素的 "click" 事件先被触发呢？
在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素，即： <p> 元素的点击事件先触发，然后会触发 <div> 元素的点击事件。
在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： <div> 元素的点击事件先触发 ，然后再触发 <p> 元素的点击事件。
默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。
40、nav>ul只选择nav下一级里面的ul元素，例如上面dom结构里id为a的ul。
nav ul选择nav内所包含的所有ul元素，例如上面dom结构里面id为a、b、c的全部ul。
nav>ul比nav ul限定更严格，必须后面的元素只比前面的低一个级别。